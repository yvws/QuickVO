// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuickVO
import Accelerate
import Combine
import CoreImage
import CoreVideo
import Foundation
import Network
@_exported import QuickVO
import Swift
import UIKit
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class RTCRoomConfig {
  public static let config: QuickVO.RTCRoomConfig
  public var video: QuickVO.RoomVideoCaptureConfig
  public var audio: QuickVO.RoomAudioCaptureConfig
  public init(video: QuickVO.RoomVideoCaptureConfig? = RTCRoomConfig.defaultVideo, audio: QuickVO.RoomAudioCaptureConfig? = RTCRoomConfig.defaultAudio)
  @objc deinit
}
extension QuickVO.RTCRoomConfig {
  public static let defaultVideo: QuickVO.RoomVideoCaptureConfig
  public static let defaultAudio: QuickVO.RoomAudioCaptureConfig
}
public enum RTCRoomConnect {
  case disConnect
  case connecting
  case connected
  public static func == (a: QuickVO.RTCRoomConnect, b: QuickVO.RTCRoomConnect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCCameraPosion {
  case font
  case back
  public static func == (a: QuickVO.RTCCameraPosion, b: QuickVO.RTCCameraPosion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RTCRoomDelegate {
  func roomStatus(_ status: QuickVO.RTCRoomConnect)
  func roomError(_ error: any Swift.Error)
  func tokenExpired()
  func tokenWillExpired()
  func didJoin(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didLeave(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didClose(_ room: QuickVO.RTCRoom)
  func didPublished(_ room: QuickVO.RTCRoom)
  func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
}
public class RTCRoom {
  public var roomId: Swift.String {
    get
  }
  public var partipant: [Swift.String : QuickVO.RTCParticipant] {
    get
  }
  public var localPartipant: QuickVO.RTCParticipant? {
    get
  }
  public var maximum: Swift.Int {
    get
  }
  public var delegate: (any QuickVO.RTCRoomDelegate)?
  public init(with config: QuickVO.RTCConfig? = nil, delegat: (any QuickVO.RTCRoomDelegate)? = nil)
  @objc deinit
}
extension QuickVO.RTCRoom {
  public func join(_ token: Swift.String, _ roomId: Swift.String? = nil, _ option: QuickVO.RoomLocalOption) async throws
  public func quit() async throws
  public func updateToken(_ roomId: Swift.String, _ token: Swift.String) async throws
}
extension QuickVO.RTCRoom {
  public func switchCamera(_ postion: QuickVO.RTCCameraPosion? = nil)
  public func enableCamera(_ enable: Swift.Bool)
  public func enableMicrophone(_ enable: Swift.Bool)
  public func enableSpeaker(_ enable: Swift.Bool)
  public func cameraIsEnable() -> Swift.Bool
  public func microphoneIsEnable() -> Swift.Bool
  public func speakerIsEnable() -> Swift.Bool
  public func camerPosion() -> QuickVO.RTCCameraPosion
  public func startPreview(_ render: QuickVO.RoomVideoView)
  public func setRoomAudioVolume(_ volum: Swift.Double)
}
extension QuickVO.RTCRoomDelegate {
  public func roomStatus(_ status: QuickVO.RTCRoomConnect)
  public func roomError(_ error: any Swift.Error)
  public func didPublished(_ room: QuickVO.RTCRoom)
  public func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  public func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
}
@_hasMissingDesignatedInitializers final public class RTCEngine {
  final public var appId: Swift.String {
    get
  }
  @objc deinit
}
extension QuickVO.RTCEngine {
  public static func create(_ appId: Swift.String)
  public static func destroy()
}
extension Swift.Bool {
  public var int: Swift.Int {
    get
  }
  public var string: Swift.String {
    get
  }
}
public enum RTCVideoMirror {
  case none
  case mirror
  case auto
  public static func == (a: QuickVO.RTCVideoMirror, b: QuickVO.RTCVideoMirror) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RoomVideoDelegate {
  func videoView(didChangeVideoSize size: CoreFoundation.CGSize)
  func renderFisrtFrame()
}
extension QuickVO.RoomVideoDelegate {
  public func videoView(didChangeVideoSize size: CoreFoundation.CGSize)
  public func renderFisrtFrame()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class RoomVideoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any QuickVO.RoomVideoDelegate)?
  @_Concurrency.MainActor @preconcurrency public var mirror: QuickVO.RTCVideoMirror {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var videoContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rotationOverride: Foundation.NSValue? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension QuickVO.RoomVideoView : WebRTC.RTCVideoViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
public enum RTCStatisLevel : Swift.Int {
  case none
  case veryBad
  case bad
  case generally
  case good
  case veryGood
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetMonitorValue {
  public var up: QuickVO.RTCStatisLevel
  public var donw: QuickVO.RTCStatisLevel
}
public struct RoomLocalOption {
  public var userFontCamera: Swift.Bool
  public var defaultStartCamera: Swift.Bool
  public var defaultUseMicrophone: Swift.Bool
  public init(userId: Swift.String, userFontCamera: Swift.Bool = true, defaultStartCamera: Swift.Bool = true, defaultUseMicrophone: Swift.Bool = true)
}
public class RoomVideoCaptureConfig {
  public var width: Swift.Int
  public var height: Swift.Int
  public var fps: Swift.Int
  public var filter: QuickVO.RoomVideoFilterConfig {
    get
  }
  public init(width: Swift.Int, height: Swift.Int, fps: Swift.Int, filter: QuickVO.RoomVideoFilterConfig? = nil)
  @objc deinit
}
public class RoomAudioCaptureConfig {
  public var echoCancellation: Swift.Bool
  public var noiseSuppression: Swift.Bool
  public var autoGainControl: Swift.Bool
  public var audioLevelMonitor: Swift.Int?
  public init(echoCancellation: Swift.Bool, noiseSuppression: Swift.Bool, autoGainControl: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoFilterConfig {
  public var enable: Swift.Bool {
    get
    set
  }
  public var buffing: Swift.Float {
    get
    set
  }
  public var white: Swift.Float {
    get
    set
  }
  public var thin: Swift.Float {
    get
    set
  }
  public var eye: Swift.Float {
    get
    set
  }
  public var lipstick: Swift.Float {
    get
    set
  }
  public var blusher: Swift.Float {
    get
    set
  }
  public var light: Swift.Float {
    get
    set
  }
  @objc deinit
}
public struct RTCConfig {
  public let socketURL: Foundation.URL
  public let iceURL: [Swift.String]
  public init(socketURL: Foundation.URL, iceURL: [Swift.String])
}
public enum RTCParticipantAtion {
  case audioEnable
  case videoEnable
  public static func == (a: QuickVO.RTCParticipantAtion, b: QuickVO.RTCParticipantAtion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RTCParticipantDelegate {
  func addVideoTrack(_ track: QuickVO.RoomVideoTrack)
  func addAuidoTrack(_ track: QuickVO.RoomAudioTrack)
  func action(_ action: QuickVO.RTCParticipantAtion)
  func speacking(_ speacking: Swift.Bool)
  func network(_ net: QuickVO.NetMonitorValue)
}
extension QuickVO.RTCParticipantDelegate {
  public func addAuidoTrack(_ track: QuickVO.RoomAudioTrack)
  public func action(_ action: QuickVO.RTCParticipantAtion)
  public func speacking(_ speacking: Swift.Bool)
  public func network(_ net: QuickVO.NetMonitorValue)
}
public class RTCParticipant {
  public var id: Swift.String
  public init(id: Swift.String)
  public var delegate: (any QuickVO.RTCParticipantDelegate)?
  public var audioEnable: Swift.Bool {
    get
  }
  public var videoEnable: Swift.Bool {
    get
  }
  public var isSpeacking: Swift.Bool {
    get
  }
  public var netMonitor: QuickVO.NetMonitorValue {
    get
  }
  public var volume: Swift.Double? {
    get
    set
  }
  public var audioTracks: [QuickVO.RoomAudioTrack] {
    get
  }
  public var videoTracks: [QuickVO.RoomVideoTrack] {
    get
  }
  @objc deinit
}
public protocol RoomError : Foundation.LocalizedError, Swift.CustomStringConvertible {
}
extension QuickVO.RoomError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConnectError : QuickVO.RoomError {
  case requestError(Swift.Int32, _: Swift.String? = nil)
  case requestTimeOut
  case overTheLimit
  case disConnected
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomAudioTrack {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var volume: Swift.Double {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoTrack {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var render: QuickVO.RoomVideoView? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RTCNetworkMonitor {
  public enum NetworkMotorStatus {
    case reachable
    case unReachable
    public static func == (a: QuickVO.RTCNetworkMonitor.NetworkMotorStatus, b: QuickVO.RTCNetworkMonitor.NetworkMotorStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum NetworkMotorType {
    case wifi
    case cellular
    case other
    public static func == (a: QuickVO.RTCNetworkMonitor.NetworkMotorType, b: QuickVO.RTCNetworkMonitor.NetworkMotorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var status: ((QuickVO.RTCNetworkMonitor.NetworkMotorStatus) -> Swift.Void)?
  final public var type: ((QuickVO.RTCNetworkMonitor.NetworkMotorType) -> Swift.Void)?
  final public func stopMonitor()
  final public func startMonitor()
  @objc deinit
}
extension QuickVO.RTCRoomConnect : Swift.Equatable {}
extension QuickVO.RTCRoomConnect : Swift.Hashable {}
extension QuickVO.RTCCameraPosion : Swift.Equatable {}
extension QuickVO.RTCCameraPosion : Swift.Hashable {}
extension QuickVO.RTCVideoMirror : Swift.Equatable {}
extension QuickVO.RTCVideoMirror : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.Equatable {}
extension QuickVO.RTCStatisLevel : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.RawRepresentable {}
extension QuickVO.RTCParticipantAtion : Swift.Equatable {}
extension QuickVO.RTCParticipantAtion : Swift.Hashable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorStatus : Swift.Equatable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorStatus : Swift.Hashable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorType : Swift.Equatable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorType : Swift.Hashable {}
