// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuickVO
import AVFoundation
import Accelerate
import BackgroundTasks
import CoreImage.CIFilterBuiltins
import Combine
import CoreFoundation
import CoreImage
import CoreMedia
import CoreVideo
import Darwin
import Foundation
import Metal
import MetalKit
import Network
@_exported import QuickVO
import ReplayKit
import Swift
import UIKit
import Vision
import VisionKit
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.lock
import os
public protocol RTCParticipantDelegate : AnyObject {
  func addVideoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomVideoTrack)
  func addAuidoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomAudioTrack)
  func action(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.RTCParticipantAtion)
  func speaking(_ participant: QuickVO.RTCParticipant, _ speaking: Swift.Bool)
  func network(_ participant: QuickVO.RTCParticipant, _ net: QuickVO.NetMonitorValue)
  func forbid(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.PaticipantForbidAction)
}
extension QuickVO.RTCParticipantDelegate {
  public func addAuidoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomAudioTrack)
  public func action(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.RTCParticipantAtion)
  public func speaking(_ participant: QuickVO.RTCParticipant, _ speaking: Swift.Bool)
  public func network(_ participant: QuickVO.RTCParticipant, _ net: QuickVO.NetMonitorValue)
  public func forbid(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.PaticipantForbidAction)
}
public enum RTCRoomConnect {
  case none
  case disConnect
  case connecting
  case connected
  public static func == (a: QuickVO.RTCRoomConnect, b: QuickVO.RTCRoomConnect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCCameraPosion {
  case font
  case back
  public static func == (a: QuickVO.RTCCameraPosion, b: QuickVO.RTCCameraPosion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCAudioRoute : Swift.Sendable {
  case speaker
  case receiver
  case bluetooth
  case headphones
  public static func == (a: QuickVO.RTCAudioRoute, b: QuickVO.RTCAudioRoute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoomScene : Swift.Sendable {
  case communication
  case meeting
  case live
  public static func == (a: QuickVO.RoomScene, b: QuickVO.RoomScene) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StreamType : Swift.Sendable {
  case auto
  case manual
  public static func == (a: QuickVO.StreamType, b: QuickVO.StreamType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum MultipathNetSeverType {
  case none
  case handover
  case interactive
  public static func == (a: QuickVO.MultipathNetSeverType, b: QuickVO.MultipathNetSeverType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SimulcastType : Swift.Sendable {
  case high
  case medium
  case low
  public static func == (a: QuickVO.SimulcastType, b: QuickVO.SimulcastType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoomUserSubData {
  public var id: Swift.String
  public var track: [QuickVO.RoomTrackType]
  public init(id: Swift.String = "", track: [QuickVO.RoomTrackType] = [])
}
public protocol RTCRoomDelegate : AnyObject {
  func roomStatus(_ status: QuickVO.RTCRoomConnect)
  func roomError(_ error: any Swift.Error)
  func tokenExpired()
  func tokenWillExpired()
  func didJoin(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didLeave(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didClose(_ room: QuickVO.RTCRoom, _ code: Swift.Int?, _ desc: Swift.String?)
  func didPublished(_ room: QuickVO.RTCRoom, _ track: [QuickVO.RoomTrackType])
  func receivePublished(_ room: QuickVO.RTCRoom, _ sub: [QuickVO.RoomUserSubData])
  func didSubscribed(_ room: QuickVO.RTCRoom, _ sub: [QuickVO.RoomUserSubData])
  func updateAudioLevel(_ room: QuickVO.RTCRoom, _ participant: [QuickVO.RTCParticipant])
  func audioSessionRouteChange(_ room: QuickVO.RTCRoom, _ route: QuickVO.RTCAudioRoute)
  func audioSessionInterrupt(_ room: QuickVO.RTCRoom, _ type: AVFAudio.AVAudioSession.InterruptionType)
  func liveDidSetPlaybackUrls(_ room: QuickVO.RTCRoom, _ urls: QuickVO.RoomLivePlaybackUrls)
  func disConnectWithoutRoom(_ room: QuickVO.RTCRoom)
}
extension QuickVO.RTCRoomDelegate {
  public func roomStatus(_ status: QuickVO.RTCRoomConnect)
  public func roomError(_ error: any Swift.Error)
  public func tokenWillExpired()
  public func didPublished(_ room: QuickVO.RTCRoom, _ track: [QuickVO.RoomTrackType])
  public func receivePublished(_ room: QuickVO.RTCRoom, _ sub: [QuickVO.RoomUserSubData])
  public func didSubscribed(_ room: QuickVO.RTCRoom, _ sub: [QuickVO.RoomUserSubData])
  public func updateAudioLevel(_ room: QuickVO.RTCRoom, _ participant: [QuickVO.RTCParticipant])
  public func audioSessionRouteChange(_ room: QuickVO.RTCRoom, _ route: QuickVO.RTCAudioRoute)
  public func audioSessionInterrupt(_ room: QuickVO.RTCRoom, _ type: AVFAudio.AVAudioSession.InterruptionType)
  public func liveDidSetPlaybackUrls(_ room: QuickVO.RTCRoom, _ urls: QuickVO.RoomLivePlaybackUrls)
  public func disConnectWithoutRoom(_ room: QuickVO.RTCRoom)
}
public struct RoomLivePlaybackUrls : Swift.Sendable {
  public var urls: [QuickVO.RoomLivePlaybackUrls.RoomLiveUrlData]
  public struct RoomLiveUrlData : Swift.Sendable {
  }
  public enum RoomLiveLocation : Swift.Int, Swift.CaseIterable, Swift.Sendable {
    case chinaMainland
    case global
    case overseas
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [QuickVO.RoomLivePlaybackUrls.RoomLiveLocation]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [QuickVO.RoomLivePlaybackUrls.RoomLiveLocation] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum RoomLiveBilling : Swift.Int, Swift.CaseIterable, Swift.Sendable {
    case flow
    case time
    public init?(rawValue: Swift.Int)
    public typealias AllCases = [QuickVO.RoomLivePlaybackUrls.RoomLiveBilling]
    public typealias RawValue = Swift.Int
    nonisolated public static var allCases: [QuickVO.RoomLivePlaybackUrls.RoomLiveBilling] {
      get
    }
    public var rawValue: Swift.Int {
      get
    }
  }
}
public protocol RoomError : Foundation.LocalizedError, Swift.CustomStringConvertible {
}
extension QuickVO.RoomError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConnectError : QuickVO.RoomError {
  case connectError(Swift.Int32, _: Swift.String? = nil)
  case connectTimeOut(_: Swift.String? = nil)
  case disConnected
  case publishStreamFailure([QuickVO.RoomTrackType])
  case subscribeStreamFailure([QuickVO.RoomUserSubData])
  case unSubscribeStreamFailure([QuickVO.RoomUserSubData])
  case startScreenShareWithoutGroupId
  case noAuth
  case joined
  public var description: Swift.String {
    get
  }
}
public enum RTCStatisLevel : Swift.Int {
  case none
  case veryBad
  case bad
  case generally
  case good
  case veryGood
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetMonitorValue {
  public var up: QuickVO.RTCStatisLevel
  public var donw: QuickVO.RTCStatisLevel
}
public class RTCRoomConfig {
  public static let config: QuickVO.RTCRoomConfig
  public var video: QuickVO.RoomVideoCaptureConfig
  public var audio: QuickVO.RoomAudioCaptureConfig
  public init(video: QuickVO.RoomVideoCaptureConfig? = RTCRoomConfig.defaultVideo, audio: QuickVO.RoomAudioCaptureConfig? = RTCRoomConfig.defaultAudio)
  @objc deinit
}
extension QuickVO.RTCRoomConfig {
  public static let defaultVideo: QuickVO.RoomVideoCaptureConfig
  public static let defaultAudio: QuickVO.RoomAudioCaptureConfig
}
public class RTCRoom {
  weak public var delegate: (any QuickVO.RTCRoomDelegate)?
  weak public var videoCaptureDelegate: (any QuickVO.RoomVideoCaptureDelegate)?
  public var roomId: Swift.String {
    get
  }
  public var partipant: [Swift.String : QuickVO.RTCParticipant] {
    get
  }
  public var localPartipant: QuickVO.RTCParticipant? {
    get
  }
  public init(with config: QuickVO.RTCConfig? = nil, delegat: (any QuickVO.RTCRoomDelegate)? = nil)
  @objc deinit
}
extension QuickVO.RTCRoom {
  public func connect() async throws
  public func join(_ token: Swift.String? = nil, _ roomId: Swift.String, _ option: QuickVO.RoomLocalOption) async throws
  public func join(_ roomId: Swift.String, _ option: QuickVO.RoomLocalOption) async throws
  public func quit() async
  public func quitStayConnected() async throws
  public func updateToken(_ roomId: Swift.String, _ token: Swift.String) async throws
  public func subscribe(_ userData: [QuickVO.RoomUserSubData]) async throws
  public func unSubscribe(_ userData: [QuickVO.RoomUserSubData]) async throws
  public func publishStream() async throws
  public func startScreenShare(_ appGroup: Swift.String) async throws
}
extension QuickVO.RTCRoom {
  public func switchCamera(_ postion: QuickVO.RTCCameraPosion? = nil)
  public func camerPosion() -> QuickVO.RTCCameraPosion
  public func enableSpeaker(_ enable: Swift.Bool)
  public func speakerIsEnable() async -> Swift.Bool
  @discardableResult
  public func switchSpeaker() async -> Swift.Bool
  public func enableCamera(_ enable: Swift.Bool)
  public func enableMicrophone(_ enable: Swift.Bool)
  public func cameraIsEnable() -> Swift.Bool
  public func microphoneIsEnable() -> Swift.Bool
  public func startPreview(_ render: QuickVO.RoomVideoView)
  public func setRoomAudioVolume(_ volum: Swift.Double)
  public func forbidWith(_ action: [QuickVO.PaticipantForbidAction]) async throws
}
extension QuickVO.RTCRoom {
  public var isMultitaskingCameraAccessSupported: Swift.Bool {
    get
  }
  public var isMultitaskingCameraAccessEnabled: Swift.Bool {
    get
    set
  }
}
@_hasMissingDesignatedInitializers final public class RTCEngine {
  public static let engine: QuickVO.RTCEngine
  final public var appId: Swift.String {
    get
  }
  final public var netStatus: ((QuickVO.NetworkMotorStatus) -> Swift.Void)?
  final public var netType: ((QuickVO.NetworkMotorType) -> Swift.Void)?
  final public let statusSubject: Combine.PassthroughSubject<QuickVO.NetworkMotorStatus, Swift.Never>
  final public let typeSubject: Combine.PassthroughSubject<QuickVO.NetworkMotorType, Swift.Never>
  final public var netMultiPath: QuickVO.MultipathNetSeverType {
    get
    set
  }
  @objc deinit
}
extension QuickVO.RTCEngine {
  public static func create(_ appId: Swift.String)
  public static func destroy()
}
extension Foundation.Data {
  public mutating func append(_ string: Swift.String)
}
public struct RoomSubData {
}
@propertyWrapper public struct Clamping<WrappedValue> where WrappedValue : Swift.Comparable {
  public init(wrappedValue value: WrappedValue, _ range: Swift.ClosedRange<WrappedValue>)
  public var wrappedValue: WrappedValue {
    get
    set
  }
}
@propertyWrapper public struct NS_Lock<WrappedValue> {
  public init(wrappedValue value: WrappedValue)
  public var wrappedValue: WrappedValue {
    get
    set
  }
}
@propertyWrapper public struct QueueLock<WrappedValue> {
  public init(wrappedValue value: WrappedValue)
  public var wrappedValue: WrappedValue {
    get
    set
  }
}
@propertyWrapper public struct UnfairLock<WrappedValue> {
  public init(wrappedValue value: WrappedValue)
  public var wrappedValue: WrappedValue {
    mutating get
    set
  }
}
@propertyWrapper public struct Unique<T> where T : Swift.Equatable {
  public var wrappedValue: T? {
    get
    set
  }
  public init(wrappedValue: T?)
}
@propertyWrapper public struct Validated<Value> {
  public init(wrappedValue: Value, validator: @escaping (Value) -> Swift.Bool)
  public var wrappedValue: Value? {
    get
    set
  }
}
@propertyWrapper public struct UserDfaultsWrapper<T> {
  public var wrappedValue: T {
    get
    nonmutating set
  }
  public init(_ key: Swift.String, defaultV: T)
}
public actor TaskActor<T> {
  public init(task: ((T) async -> Swift.Void)?)
  public enum State : Swift.Sendable {
    case processing
    case paused
    public static func == (a: QuickVO.TaskActor<T>.State, b: QuickVO.TaskActor<T>.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension QuickVO.TaskActor {
  public func processTask(_ value: T) async
  public func start() async
  public func puause()
  public func stop()
}
public actor DetachedTaskActor<T> {
  public init(task: ((T) async -> Swift.Void)?)
  public enum State : Swift.Sendable {
    case processing
    case paused
    public static func == (a: QuickVO.DetachedTaskActor<T>.State, b: QuickVO.DetachedTaskActor<T>.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension QuickVO.DetachedTaskActor {
  public func processTask(_ value: T) async
  public func start() async
  public func pause()
  public func stop()
  public func reStart(_ value: T) async
}
extension Swift.Bool {
  public var int: Swift.Int {
    get
  }
  public var string: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public actor TimeoutSubject {
  public func setTimeOut(_ time: Swift.Int, _ recalculate: Swift.Bool? = true) async -> Swift.Bool
  public func cancel()
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
public enum RTCVideoMirror {
  case none
  case mirror
  case auto
  public static func == (a: QuickVO.RTCVideoMirror, b: QuickVO.RTCVideoMirror) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RoomVideoDelegate : AnyObject {
  func videoView(didChangeVideoSize: QuickVO.RoomVideoView, size: CoreFoundation.CGSize)
  func renderFisrtFrame(view: QuickVO.RoomVideoView)
}
extension QuickVO.RoomVideoDelegate {
  public func videoView(didChangeVideoSize: QuickVO.RoomVideoView, size: CoreFoundation.CGSize)
  public func renderFisrtFrame(view: QuickVO.RoomVideoView)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class RoomVideoView : QuickVO.RTCView {
  public enum VideoRenderMode {
    case MTL
    case sampleBuffer
    public static func == (a: QuickVO.RoomVideoView.VideoRenderMode, b: QuickVO.RoomVideoView.VideoRenderMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any QuickVO.RoomVideoDelegate)?
  @_Concurrency.MainActor @preconcurrency public var mirror: QuickVO.RTCVideoMirror {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var videoContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rotationOverride: Foundation.NSValue? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var renderMode: QuickVO.RoomVideoView.VideoRenderMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var sampleBufferDisplayLayer: AVFoundation.AVSampleBufferDisplayLayer? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency required public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension QuickVO.RoomVideoView : WebRTC.RTCVideoViewDelegate {
  @objc nonisolated dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
public struct RoomLocalOption : Swift.Sendable {
  public var defaultStartCamera: Swift.Bool
  public var subscribeType: QuickVO.StreamType
  public var publishType: QuickVO.StreamType
  public var scene: QuickVO.RoomScene
  public var userFontCamera: Swift.Bool
  public var defaultAuioSpeakerOn: Swift.Bool
  public init(userId: Swift.String, userFontCamera: Swift.Bool = true, defaultStartCamera: Swift.Bool = true, defaultAuioSpeakerOn: Swift.Bool = false, subscribeType: QuickVO.StreamType = .auto, publishType: QuickVO.StreamType = .auto, scence: QuickVO.RoomScene = .communication)
}
final public class RoomVideoCaptureConfig {
  final public var width: Swift.Int {
    get
    set
  }
  final public var height: Swift.Int {
    get
    set
  }
  final public var fps: Swift.Int {
    get
    set
  }
  final public var degradation: QuickVO.RoomVideodegradation {
    get
    set
  }
  final public var filter: QuickVO.RoomVideoFilterConfig {
    get
  }
  final public var crop: QuickVO.RoomVideoCropping {
    get
  }
  public init(width: Swift.Int, height: Swift.Int, fps: Swift.Int, filter: QuickVO.RoomVideoFilterConfig? = nil)
  @objc deinit
}
final public class RoomAudioCaptureConfig {
  final public var echoCancellation: Swift.Bool
  final public var noiseSuppression: Swift.Bool
  final public var autoGainControl: Swift.Bool
  final public var audioLevelMonitor: Swift.Int?
  public init(echoCancellation: Swift.Bool, noiseSuppression: Swift.Bool, autoGainControl: Swift.Bool)
  @objc deinit
}
public enum RoomVideodegradation : Swift.Int, Swift.CaseIterable {
  case disabled
  case framerate
  case resolution
  case balanced
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [QuickVO.RoomVideodegradation]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [QuickVO.RoomVideodegradation] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomVideoFilterConfig {
  public var enable: Swift.Bool {
    get
    set
  }
  public var buffing: Swift.Float {
    get
    set
  }
  public var white: Swift.Float {
    get
    set
  }
  public var thin: Swift.Float {
    get
    set
  }
  public var eye: Swift.Float {
    get
    set
  }
  public var lipstick: Swift.Float {
    get
    set
  }
  public var blusher: Swift.Float {
    get
    set
  }
  public var light: Swift.Float {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RoomVideoCropping {
  final public var aspectRatio: Swift.Float?
  @QuickVO.Clamping final public var cropXRatio: Swift.Float {
    get
    set
    _modify
  }
  @QuickVO.Clamping final public var cropYRatio: Swift.Float {
    get
    set
    _modify
  }
  @objc deinit
}
public struct RTCConfig {
  public init(socketURL: Foundation.URL, iceURL: [Swift.String]?)
}
public typealias RTCViewType = UIKit.UIView
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class RTCView : QuickVO.RTCViewType {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @available(*, unavailable)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder _: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func performLayout()
  @objc deinit
}
public enum AudioError : Swift.Error {
  case permissionDenied
  case proceessError
  public static func == (a: QuickVO.AudioError, b: QuickVO.AudioError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RoomAuidioTool : ObjectiveC.NSObject {
  public func checkRecordAndPlay() async throws
  public func checkMicrophonePermission() async throws
  @objc deinit
}
extension QuickVO.RoomAuidioTool : AVFAudio.AVAudioPlayerDelegate {
  @objc dynamic public func audioPlayerDidFinishPlaying(_ player: AVFAudio.AVAudioPlayer, successfully flag: Swift.Bool)
}
@_hasMissingDesignatedInitializers public actor RoomNetUtils {
  public enum PingError : Swift.Error {
    case alreadyPing
    public static func == (a: QuickVO.RoomNetUtils.PingError, b: QuickVO.RoomNetUtils.PingError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct PingData {
  }
  @objc deinit
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  @_semantics("defaultActor") nonisolated final public var unownedExecutor: _Concurrency.UnownedSerialExecutor {
    get
  }
}
extension QuickVO.RoomNetUtils {
  public func startPing(_ time: Swift.UInt64? = 3) async throws -> QuickVO.RoomNetUtils.PingData
  public func stopPing()
}
@_hasMissingDesignatedInitializers public class ScreenRecorder {
  @objc deinit
}
extension QuickVO.ScreenRecorder {
  public func startRecord() async
  @available(iOS 14.0, *)
  public func stopRecord(_ url: Foundation.URL) async throws
  public func stopRecord(_ handle: ((ReplayKit.RPPreviewViewController?, (any Swift.Error)?) -> Swift.Void)? = nil)
}
extension AVFoundation.AVCaptureDevice {
  public var devicePosition: AVFoundation.AVCaptureDevice.Position {
    get
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension WebRTC.RTCSessionDescription : @unchecked @retroactive Swift.Sendable {
}
#else
extension WebRTC.RTCSessionDescription : @unchecked Swift.Sendable {
}
#endif
public enum RoomVideoRotation : Swift.Int, Swift.Sendable {
  case _0
  case _90
  case _180
  case _270
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum RoomVideoRrocessMode {
  case readOnly
  case readWrite
  public static func == (a: QuickVO.RoomVideoRrocessMode, b: QuickVO.RoomVideoRrocessMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RoomVideoCaptureDelegate : AnyObject {
  func processMode() -> QuickVO.RoomVideoRrocessMode
  func getCaputureBuffer(buffer: CoreVideo.CVPixelBuffer, rotation: QuickVO.RoomVideoRotation)
  func setCaputureBuffer() -> (buffer: CoreVideo.CVPixelBuffer, rotation: QuickVO.RoomVideoRotation)?
}
@_hasMissingDesignatedInitializers open class RTCParticipant {
  weak public var delegate: (any QuickVO.RTCParticipantDelegate)?
  public var id: Swift.String {
    get
  }
  public var audioTracks: [QuickVO.RoomAudioTrack] {
    get
  }
  public var videoTracks: [QuickVO.RoomVideoTrack] {
    get
  }
  public var audioEnable: Swift.Bool {
    get
  }
  public var videoEnable: Swift.Bool {
    get
  }
  public var screenEnable: Swift.Bool {
    get
  }
  public var isSpeaking: Swift.Bool {
    get
  }
  public var netMonitor: QuickVO.NetMonitorValue {
    get
  }
  public var volume: Swift.Double? {
    get
    set
  }
  public var joinTime: Swift.Int64 {
    get
  }
  public var publishAuth: Swift.Bool {
    get
  }
  public var subscribeAuth: Swift.Bool {
    get
  }
  public func getTrack(type: QuickVO.RoomTrackType) -> QuickVO.RoomTrack?
  public func getTrackType() -> [QuickVO.RoomTrackType]
  public var audioForbid: Swift.Bool {
    get
    set
  }
  public var videoForbid: Swift.Bool {
    get
    set
  }
  public var isPublished: Swift.Bool {
    get
  }
  @objc deinit
}
public enum RTCParticipantAtion {
  case audioEnable(Swift.Bool)
  case videoEnable(Swift.Bool)
  case screenShare(Swift.Bool)
}
public enum PaticipantForbidAction {
  case audioForbid(Swift.Bool)
  case videoForbid(Swift.Bool)
}
public protocol RTCTrackInfo {
  var trackId: Swift.String { get }
  var isEnabled: Swift.Bool { get set }
}
@_hasMissingDesignatedInitializers public class RoomTrack {
  public var trackType: QuickVO.RoomTrackType {
    get
  }
  @objc deinit
}
extension QuickVO.RoomTrack : Swift.Hashable, Swift.Equatable {
  public static func == (lhs: QuickVO.RoomTrack, rhs: QuickVO.RoomTrack) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RoomTrackType : Swift.CaseIterable, Swift.Hashable {
  case audio
  case camera
  case screen
  case sysAudio
  public static func == (a: QuickVO.RoomTrackType, b: QuickVO.RoomTrackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [QuickVO.RoomTrackType]
  nonisolated public static var allCases: [QuickVO.RoomTrackType] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomAudioTrack : QuickVO.RoomTrack, QuickVO.RTCTrackInfo {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var volume: Swift.Double {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoTrack : QuickVO.RoomTrack, QuickVO.RTCTrackInfo {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var render: QuickVO.RoomVideoView? {
    get
    set
  }
  @objc deinit
}
public enum NetworkMotorStatus : Swift.Sendable {
  case reachable
  case unReachable
  public static func == (a: QuickVO.NetworkMotorStatus, b: QuickVO.NetworkMotorStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkMotorType : Swift.Sendable {
  case wifi
  case cellular
  case other
  public static func == (a: QuickVO.NetworkMotorType, b: QuickVO.NetworkMotorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension QuickVO.RTCRoomConnect : Swift.Equatable {}
extension QuickVO.RTCRoomConnect : Swift.Hashable {}
extension QuickVO.RTCCameraPosion : Swift.Equatable {}
extension QuickVO.RTCCameraPosion : Swift.Hashable {}
extension QuickVO.RTCAudioRoute : Swift.Equatable {}
extension QuickVO.RTCAudioRoute : Swift.Hashable {}
extension QuickVO.RoomScene : Swift.Equatable {}
extension QuickVO.RoomScene : Swift.Hashable {}
extension QuickVO.StreamType : Swift.Equatable {}
extension QuickVO.StreamType : Swift.Hashable {}
extension QuickVO.MultipathNetSeverType : Swift.Equatable {}
extension QuickVO.MultipathNetSeverType : Swift.Hashable {}
extension QuickVO.SimulcastType : Swift.Equatable {}
extension QuickVO.SimulcastType : Swift.Hashable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveLocation : Swift.Equatable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveLocation : Swift.Hashable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveLocation : Swift.RawRepresentable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveBilling : Swift.Equatable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveBilling : Swift.Hashable {}
extension QuickVO.RoomLivePlaybackUrls.RoomLiveBilling : Swift.RawRepresentable {}
extension QuickVO.RTCStatisLevel : Swift.Equatable {}
extension QuickVO.RTCStatisLevel : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.RawRepresentable {}
extension QuickVO.TaskActor.State : Swift.Equatable {}
extension QuickVO.TaskActor.State : Swift.Hashable {}
extension QuickVO.DetachedTaskActor.State : Swift.Equatable {}
extension QuickVO.DetachedTaskActor.State : Swift.Hashable {}
extension QuickVO.RTCVideoMirror : Swift.Equatable {}
extension QuickVO.RTCVideoMirror : Swift.Hashable {}
extension QuickVO.RoomVideoView.VideoRenderMode : Swift.Equatable {}
extension QuickVO.RoomVideoView.VideoRenderMode : Swift.Hashable {}
extension QuickVO.RoomVideodegradation : Swift.Equatable {}
extension QuickVO.RoomVideodegradation : Swift.Hashable {}
extension QuickVO.RoomVideodegradation : Swift.RawRepresentable {}
extension QuickVO.AudioError : Swift.Equatable {}
extension QuickVO.AudioError : Swift.Hashable {}
extension QuickVO.RoomNetUtils.PingError : Swift.Equatable {}
extension QuickVO.RoomNetUtils.PingError : Swift.Hashable {}
extension QuickVO.RoomVideoRotation : Swift.Equatable {}
extension QuickVO.RoomVideoRotation : Swift.Hashable {}
extension QuickVO.RoomVideoRotation : Swift.RawRepresentable {}
extension QuickVO.RoomVideoRrocessMode : Swift.Equatable {}
extension QuickVO.RoomVideoRrocessMode : Swift.Hashable {}
extension QuickVO.NetworkMotorStatus : Swift.Equatable {}
extension QuickVO.NetworkMotorStatus : Swift.Hashable {}
extension QuickVO.NetworkMotorType : Swift.Equatable {}
extension QuickVO.NetworkMotorType : Swift.Hashable {}
