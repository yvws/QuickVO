// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuickVO
import AVFoundation
import Accelerate
import BackgroundTasks
import CoreImage.CIFilterBuiltins
import Combine
import CoreFoundation
import CoreImage
import CoreVideo
import Foundation
import Network
import OSLog
@_exported import QuickVO
import ReplayKit
import Swift
import UIKit
import Vision
import VisionKit
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol RoomError : Foundation.LocalizedError, Swift.CustomStringConvertible {
}
extension QuickVO.RoomError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConnectError : QuickVO.RoomError {
  case connectError(Swift.Int32, _: Swift.String? = nil)
  case connectTimeOut
  case overTheLimit
  case disConnected
  case isConnecting
  case publishStreamFailure([QuickVO.RoomTrackType])
  case subscribeStreamFailure([Swift.String : [QuickVO.RoomTrackType]])
  case startScreenShareWithoutGroupId
  public var description: Swift.String {
    get
  }
}
public enum RTCStatisLevel : Swift.Int {
  case none
  case veryBad
  case bad
  case generally
  case good
  case veryGood
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetMonitorValue {
  public var up: QuickVO.RTCStatisLevel
  public var donw: QuickVO.RTCStatisLevel
}
public class RTCRoomConfig {
  public static let config: QuickVO.RTCRoomConfig
  public var video: QuickVO.RoomVideoCaptureConfig
  public var audio: QuickVO.RoomAudioCaptureConfig
  public init(video: QuickVO.RoomVideoCaptureConfig? = RTCRoomConfig.defaultVideo, audio: QuickVO.RoomAudioCaptureConfig? = RTCRoomConfig.defaultAudio)
  @objc deinit
}
extension QuickVO.RTCRoomConfig {
  public static let defaultVideo: QuickVO.RoomVideoCaptureConfig
  public static let defaultAudio: QuickVO.RoomAudioCaptureConfig
}
public enum RTCRoomConnect {
  case disConnect
  case connecting
  case connected
  public static func == (a: QuickVO.RTCRoomConnect, b: QuickVO.RTCRoomConnect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCCameraPosion {
  case font
  case back
  public static func == (a: QuickVO.RTCCameraPosion, b: QuickVO.RTCCameraPosion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCAudioRoute {
  case speaker
  case receiver
  case bluetooth
  case headphones
  public static func == (a: QuickVO.RTCAudioRoute, b: QuickVO.RTCAudioRoute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RTCRoomDelegate : AnyObject {
  func roomStatus(_ status: QuickVO.RTCRoomConnect)
  func roomError(_ error: any Swift.Error)
  func tokenExpired()
  func tokenWillExpired()
  func didJoin(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didLeave(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didClose(_ room: QuickVO.RTCRoom)
  func didPublished(_ room: QuickVO.RTCRoom, _ track: [QuickVO.RoomTrackType])
  func receivePublished(_ room: QuickVO.RTCRoom, _ participant: [Swift.String : [QuickVO.RoomTrackType]])
  func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: [Swift.String : [QuickVO.RoomTrackType]])
  func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
  func audioSessionRouteChange(_ route: QuickVO.RTCAudioRoute)
}
public class RTCRoom {
  public var roomId: Swift.String {
    get
  }
  public var partipant: [Swift.String : QuickVO.RTCParticipant] {
    get
  }
  public var localPartipant: QuickVO.RTCParticipant? {
    get
  }
  public var maximum: Swift.Int {
    get
  }
  weak public var delegate: (any QuickVO.RTCRoomDelegate)?
  public init(with config: QuickVO.RTCConfig? = nil, delegat: (any QuickVO.RTCRoomDelegate)? = nil)
  @objc deinit
}
extension QuickVO.RTCRoom {
  public func join(_ token: Swift.String, _ roomId: Swift.String? = nil, _ option: QuickVO.RoomLocalOption) async throws
  public func quit() async throws
  public func updateToken(_ roomId: Swift.String, _ token: Swift.String) async throws
  public func subscribe(_ participant: [Swift.String : [QuickVO.RoomTrackType]]) async
  public func unSubscribe(_ participant: [Swift.String : [QuickVO.RoomTrackType]]) async throws
  public func startScreenShare(_ appGroup: Swift.String) async throws
}
extension QuickVO.RTCRoom {
  public func switchCamera(_ postion: QuickVO.RTCCameraPosion? = nil)
  public func enableCamera(_ enable: Swift.Bool)
  public func enableMicrophone(_ enable: Swift.Bool)
  public func enableSpeaker(_ enable: Swift.Bool)
  public func cameraIsEnable() -> Swift.Bool
  public func microphoneIsEnable() -> Swift.Bool
  public func speakerIsEnable() -> Swift.Bool
  public func camerPosion() -> QuickVO.RTCCameraPosion
  public func startPreview(_ render: QuickVO.RoomVideoView)
  public func setRoomAudioVolume(_ volum: Swift.Double)
}
extension QuickVO.RTCRoomDelegate {
  public func roomStatus(_ status: QuickVO.RTCRoomConnect)
  public func roomError(_ error: any Swift.Error)
  public func didPublished(_ room: QuickVO.RTCRoom, _ track: [QuickVO.RoomTrackType])
  public func receivePublished(_ room: QuickVO.RTCRoom, _ participant: [Swift.String : [QuickVO.RoomTrackType]])
  public func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: [Swift.String : [QuickVO.RoomTrackType]])
  public func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
  public func audioSessionRouteChange(_ route: QuickVO.RTCAudioRoute)
}
@_hasMissingDesignatedInitializers final public class RTCEngine {
  final public var appId: Swift.String {
    get
  }
  final public var netStatus: ((QuickVO.NetworkMotorStatus) -> Swift.Void)?
  final public var netType: ((QuickVO.NetworkMotorType) -> Swift.Void)?
  final public let statusSubject: Combine.PassthroughSubject<QuickVO.NetworkMotorStatus, Swift.Never>
  final public let typeSubject: Combine.PassthroughSubject<QuickVO.NetworkMotorType, Swift.Never>
  final public var netMultiPath: QuickVO.MultipathNetSeverType {
    get
    set
  }
  @objc deinit
}
extension QuickVO.RTCEngine {
  public static func create(_ appId: Swift.String)
  public static func destroy()
}
public enum MultipathNetSeverType {
  case none
  case handover
  case interactive
  public static func == (a: QuickVO.MultipathNetSeverType, b: QuickVO.MultipathNetSeverType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Bool {
  public var int: Swift.Int {
    get
  }
  public var string: Swift.String {
    get
  }
}
public enum RTCVideoMirror {
  case none
  case mirror
  case auto
  public static func == (a: QuickVO.RTCVideoMirror, b: QuickVO.RTCVideoMirror) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RoomVideoDelegate : AnyObject {
  func videoView(didChangeVideoSize: QuickVO.RoomVideoView, size: CoreFoundation.CGSize)
  func renderFisrtFrame(view: QuickVO.RoomVideoView)
}
extension QuickVO.RoomVideoDelegate {
  public func videoView(didChangeVideoSize: QuickVO.RoomVideoView, size: CoreFoundation.CGSize)
  public func renderFisrtFrame(view: QuickVO.RoomVideoView)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class RoomVideoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any QuickVO.RoomVideoDelegate)?
  @_Concurrency.MainActor @preconcurrency public var mirror: QuickVO.RTCVideoMirror {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var renderBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var videoContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rotationOverride: Foundation.NSValue? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension QuickVO.RoomVideoView : WebRTC.RTCVideoViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
public enum SubscribeType {
  case auto
  case manual
  public static func == (a: QuickVO.SubscribeType, b: QuickVO.SubscribeType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct RoomLocalOption {
  public var userFontCamera: Swift.Bool
  public var defaultStartCamera: Swift.Bool
  public var defaultUseMicrophone: Swift.Bool
  public var subscribeType: QuickVO.SubscribeType
  public init(userId: Swift.String, userFontCamera: Swift.Bool = true, defaultStartCamera: Swift.Bool = true, defaultUseMicrophone: Swift.Bool = true, subscribeType: QuickVO.SubscribeType = .auto)
}
public class RoomVideoCaptureConfig {
  public var width: Swift.Int {
    get
    set
  }
  public var height: Swift.Int {
    get
    set
  }
  public var fps: Swift.Int {
    get
    set
  }
  public var filter: QuickVO.RoomVideoFilterConfig {
    get
  }
  public var degradation: QuickVO.RoomVideodegradation {
    get
    set
  }
  public init(width: Swift.Int, height: Swift.Int, fps: Swift.Int, filter: QuickVO.RoomVideoFilterConfig? = nil)
  @objc deinit
}
public class RoomAudioCaptureConfig {
  public var echoCancellation: Swift.Bool
  public var noiseSuppression: Swift.Bool
  public var autoGainControl: Swift.Bool
  public var audioLevelMonitor: Swift.Int?
  public init(echoCancellation: Swift.Bool, noiseSuppression: Swift.Bool, autoGainControl: Swift.Bool)
  @objc deinit
}
public enum RoomVideodegradation : Swift.Int, Swift.CaseIterable {
  case disabled
  case framerate
  case resolution
  case balanced
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [QuickVO.RoomVideodegradation]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [QuickVO.RoomVideodegradation] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomVideoFilterConfig {
  public var enable: Swift.Bool {
    get
    set
  }
  public var buffing: Swift.Float {
    get
    set
  }
  public var white: Swift.Float {
    get
    set
  }
  public var thin: Swift.Float {
    get
    set
  }
  public var eye: Swift.Float {
    get
    set
  }
  public var lipstick: Swift.Float {
    get
    set
  }
  public var blusher: Swift.Float {
    get
    set
  }
  public var light: Swift.Float {
    get
    set
  }
  @objc deinit
}
public struct RTCConfig {
  public let socketURL: Foundation.URL
  public let iceURL: [Swift.String]
  public init(socketURL: Foundation.URL, iceURL: [Swift.String])
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension WebRTC.RTCSessionDescription : @unchecked @retroactive Swift.Sendable {
}
#else
extension WebRTC.RTCSessionDescription : @unchecked Swift.Sendable {
}
#endif
public enum RTCParticipantAtion {
  case audioEnable(Swift.Bool)
  case videoEnable(Swift.Bool)
  case screenShare(Swift.Bool)
}
public protocol RTCParticipantDelegate : AnyObject {
  func addVideoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomVideoTrack)
  func addAuidoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomAudioTrack)
  func action(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.RTCParticipantAtion)
  func speaking(_ participant: QuickVO.RTCParticipant, _ speaking: Swift.Bool)
  func network(_ participant: QuickVO.RTCParticipant, _ net: QuickVO.NetMonitorValue)
}
extension QuickVO.RTCParticipantDelegate {
  public func addAuidoTrack(_ participant: QuickVO.RTCParticipant, _ track: QuickVO.RoomAudioTrack)
  public func action(_ participant: QuickVO.RTCParticipant, _ action: QuickVO.RTCParticipantAtion)
  public func speaking(_ participant: QuickVO.RTCParticipant, _ speaking: Swift.Bool)
  public func network(_ participant: QuickVO.RTCParticipant, _ net: QuickVO.NetMonitorValue)
  public func debugInfo(_ participant: QuickVO.RTCParticipant, _ net: QuickVO.NetMonitorValue)
}
@_hasMissingDesignatedInitializers public class RTCParticipant {
  public var id: Swift.String
  weak public var delegate: (any QuickVO.RTCParticipantDelegate)?
  public var audioEnable: Swift.Bool {
    get
  }
  public var videoEnable: Swift.Bool {
    get
  }
  public var screenShare: Swift.Bool {
    get
  }
  public var isSpeaking: Swift.Bool {
    get
  }
  public var netMonitor: QuickVO.NetMonitorValue {
    get
  }
  public var volume: Swift.Double? {
    get
    set
  }
  public var audioTracks: [QuickVO.RoomAudioTrack] {
    get
  }
  public var videoTracks: [QuickVO.RoomVideoTrack] {
    get
  }
  public var joinTime: Swift.Int64 {
    get
  }
  @objc deinit
}
public enum RoomTrackType {
  case audio
  case camera
  case screen
  public static func == (a: QuickVO.RoomTrackType, b: QuickVO.RoomTrackType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomAudioTrack {
  public var trackType: QuickVO.RoomTrackType {
    get
  }
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var volume: Swift.Double {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoTrack {
  public var trackType: QuickVO.RoomTrackType {
    get
  }
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var render: QuickVO.RoomVideoView? {
    get
    set
  }
  @objc deinit
}
public enum NetworkMotorStatus {
  case reachable
  case unReachable
  public static func == (a: QuickVO.NetworkMotorStatus, b: QuickVO.NetworkMotorStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NetworkMotorType {
  case wifi
  case cellular
  case other
  public static func == (a: QuickVO.NetworkMotorType, b: QuickVO.NetworkMotorType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension QuickVO.RTCStatisLevel : Swift.Equatable {}
extension QuickVO.RTCStatisLevel : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.RawRepresentable {}
extension QuickVO.RTCRoomConnect : Swift.Equatable {}
extension QuickVO.RTCRoomConnect : Swift.Hashable {}
extension QuickVO.RTCCameraPosion : Swift.Equatable {}
extension QuickVO.RTCCameraPosion : Swift.Hashable {}
extension QuickVO.RTCAudioRoute : Swift.Equatable {}
extension QuickVO.RTCAudioRoute : Swift.Hashable {}
extension QuickVO.MultipathNetSeverType : Swift.Equatable {}
extension QuickVO.MultipathNetSeverType : Swift.Hashable {}
extension QuickVO.RTCVideoMirror : Swift.Equatable {}
extension QuickVO.RTCVideoMirror : Swift.Hashable {}
extension QuickVO.SubscribeType : Swift.Equatable {}
extension QuickVO.SubscribeType : Swift.Hashable {}
extension QuickVO.RoomVideodegradation : Swift.Equatable {}
extension QuickVO.RoomVideodegradation : Swift.Hashable {}
extension QuickVO.RoomVideodegradation : Swift.RawRepresentable {}
extension QuickVO.RoomTrackType : Swift.Equatable {}
extension QuickVO.RoomTrackType : Swift.Hashable {}
extension QuickVO.NetworkMotorStatus : Swift.Equatable {}
extension QuickVO.NetworkMotorStatus : Swift.Hashable {}
extension QuickVO.NetworkMotorType : Swift.Equatable {}
extension QuickVO.NetworkMotorType : Swift.Hashable {}
