// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios13 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name QuickVO
import Accelerate
import Combine
import CoreImage
import CoreVideo
import Foundation
import Network
@_exported import QuickVO
import Swift
import UIKit
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class RTCRoomConfig {
  public static let config: QuickVO.RTCRoomConfig
  public var video: QuickVO.RoomVideoCaptureConfig
  public var audio: QuickVO.RoomAudioCaptureConfig
  public init(video: QuickVO.RoomVideoCaptureConfig? = RTCRoomConfig.defaultVideo, audio: QuickVO.RoomAudioCaptureConfig? = RTCRoomConfig.defaultAudio)
  @objc deinit
}
extension QuickVO.RTCRoomConfig {
  public static let defaultVideo: QuickVO.RoomVideoCaptureConfig
  public static let defaultAudio: QuickVO.RoomAudioCaptureConfig
}
public enum RTCRoomConnect {
  case disConnect
  case connecting
  case connected
  public static func == (a: QuickVO.RTCRoomConnect, b: QuickVO.RTCRoomConnect) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RTCCameraPosion {
  case font
  case back
  public static func == (a: QuickVO.RTCCameraPosion, b: QuickVO.RTCCameraPosion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RTCRoomDelegate {
  func roomStatus(_ status: QuickVO.RTCRoomConnect)
  func roomError(_ error: any Swift.Error)
  func tokenExpired()
  func tokenWillExpired()
  func didJoin(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didLeave(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func didClose(_ room: QuickVO.RTCRoom)
  func didPublished(_ room: QuickVO.RTCRoom)
  func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
}
public class RTCRoom {
  public var roomId: Swift.String {
    get
  }
  public var partipant: [Swift.String : QuickVO.RTCParticipant] {
    get
  }
  public var localPartipant: QuickVO.RTCParticipant? {
    get
  }
  public var maximum: Swift.Int {
    get
  }
  public var delegate: (any QuickVO.RTCRoomDelegate)?
  public init(with config: QuickVO.RTCConfig? = nil, delegat: (any QuickVO.RTCRoomDelegate)? = nil)
  @objc deinit
}
extension QuickVO.RTCRoom {
  public func join(_ token: Swift.String, _ roomId: Swift.String? = nil, _ option: QuickVO.RoomLocalOption) async throws
  public func quit() async throws
  public func updateToken(_ roomId: Swift.String, _ token: Swift.String) async throws
}
extension QuickVO.RTCRoom {
  public func switchCamera(_ postion: QuickVO.RTCCameraPosion? = nil)
  public func enableCamera(_ enable: Swift.Bool)
  public func enableMicrophone(_ enable: Swift.Bool)
  public func enableSpeaker(_ enable: Swift.Bool)
  public func cameraIsEnable() -> Swift.Bool
  public func microphoneIsEnable() -> Swift.Bool
  public func speakerIsEnable() -> Swift.Bool
  public func camerPosion() -> QuickVO.RTCCameraPosion
  public func startPreview(_ render: QuickVO.RoomVideoView)
  public func setRoomAudioVolume(_ volum: Swift.Double)
}
extension QuickVO.RTCRoomDelegate {
  public func roomStatus(_ error: any Swift.Error)
  public func roomError(_ error: any Swift.Error)
  public func didPublished(_ room: QuickVO.RTCRoom)
  public func didSubscribeed(_ room: QuickVO.RTCRoom, _ participant: QuickVO.RTCParticipant)
  public func updateAudioLevel(_ participant: [QuickVO.RTCParticipant])
}
@_hasMissingDesignatedInitializers final public class RTCEngine {
  final public var appId: Swift.String {
    get
  }
  @objc deinit
}
extension QuickVO.RTCEngine {
  public static func create(_ appId: Swift.String)
  public static func destroy()
}
extension QuickVO.HandyJSON {
  public static func deserialize(from dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> Self?
}
extension Swift.Array where Element : QuickVO.HandyJSON {
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> [Element?]?
  public static func deserialize(from array: Foundation.NSArray?) -> [Element?]?
  public static func deserialize(from array: [Any]?) -> [Element?]?
}
@_hasMissingDesignatedInitializers public class JSONDeserializer<T> where T : QuickVO.HandyJSON {
  public static func deserializeFrom(dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> T?
  public static func update(object: inout T, from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil)
  public static func update(object: inout T, from json: Swift.String?, designatedPath: Swift.String? = nil)
  public static func deserializeModelArrayFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> [T?]?
  public static func deserializeModelArrayFrom(array: Foundation.NSArray?) -> [T?]?
  public static func deserializeModelArrayFrom(array: [Any]?) -> [T?]?
  @objc deinit
}
public protocol _Transformable : QuickVO._Measurable {
}
open class ISO8601DateTransform : QuickVO.DateFormatterTransform {
  public init()
  @objc deinit
}
open class NSDecimalNumberTransform : QuickVO.TransformType {
  public typealias Object = Foundation.NSDecimalNumber
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.NSDecimalNumber?
  open func transformToJSON(_ value: Foundation.NSDecimalNumber?) -> Swift.String?
  @objc deinit
}
open class DateTransform : QuickVO.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.Double
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.Double?
  @objc deinit
}
public struct DeserializeOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let caseInsensitive: QuickVO.DeserializeOptions
  public static let defaultOptions: QuickVO.DeserializeOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = QuickVO.DeserializeOptions
  public typealias Element = QuickVO.DeserializeOptions
  public typealias RawValue = Swift.Int
}
public enum DebugMode : Swift.Int {
  case verbose
  case debug
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct HandyJSONConfiguration {
  public static var debugMode: QuickVO.DebugMode {
    get
    set
  }
  public static var deserializeOptions: QuickVO.DeserializeOptions
}
open class URLTransform : QuickVO.TransformType {
  public typealias Object = Foundation.URL
  public typealias JSON = Swift.String
  public init(shouldEncodeURLString: Swift.Bool = true)
  open func transformFromJSON(_ value: Any?) -> Foundation.URL?
  open func transformToJSON(_ value: Foundation.URL?) -> Swift.String?
  @objc deinit
}
public protocol _RawEnumProtocol : QuickVO._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
extension Swift.RawRepresentable where Self : QuickVO._RawEnumProtocol {
  public static func _transform(from object: Any) -> Self?
  public func _plainValue() -> Any?
}
open class TransformOf<ObjectType, JSONType> : QuickVO.TransformType {
  public typealias Object = ObjectType
  public typealias JSON = JSONType
  public init(fromJSON: @escaping (JSONType?) -> ObjectType?, toJSON: @escaping (ObjectType?) -> JSONType?)
  open func transformFromJSON(_ value: Any?) -> ObjectType?
  open func transformToJSON(_ value: ObjectType?) -> JSONType?
  @objc deinit
}
public protocol _ExtendCustomModelType : QuickVO._Transformable {
  init()
  mutating func willStartMapping()
  mutating func mapping(mapper: QuickVO.HelpingMapper)
  mutating func didFinishMapping()
}
extension QuickVO._ExtendCustomModelType {
  public mutating func willStartMapping()
  public mutating func mapping(mapper: QuickVO.HelpingMapper)
  public mutating func didFinishMapping()
}
open class HexColorTransform : QuickVO.TransformType {
  public typealias Object = UIKit.UIColor
  public typealias JSON = Swift.String
  public init(prefixToJSON: Swift.Bool = false, alphaToJSON: Swift.Bool = false)
  open func transformFromJSON(_ value: Any?) -> QuickVO.HexColorTransform.Object?
  open func transformToJSON(_ value: QuickVO.HexColorTransform.Object?) -> QuickVO.HexColorTransform.JSON?
  @objc deinit
}
open class EnumTransform<T> : QuickVO.TransformType where T : Swift.RawRepresentable {
  public typealias Object = T
  public typealias JSON = T.RawValue
  public init()
  open func transformFromJSON(_ value: Any?) -> T?
  open func transformToJSON(_ value: T?) -> T.RawValue?
  @objc deinit
}
public protocol _ExtendCustomBasicType : QuickVO._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
extension QuickVO.HandyJSON {
  public func toJSON() -> [Swift.String : Any]?
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
extension Swift.Collection where Self.Element : QuickVO.HandyJSON {
  public func toJSON() -> [[Swift.String : Any]?]
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
public typealias CustomMappingKeyValueTuple = (Swift.Int, QuickVO.MappingPropertyHandler)
public class MappingPropertyHandler {
  public init(rawPaths: [Swift.String]?, assignmentClosure: ((Any?) -> (Any?))?, takeValueClosure: ((Any?) -> (Any?))?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HelpingMapper {
  public func specify<T>(property: inout T, name: Swift.String)
  public func specify<T>(property: inout T, converter: @escaping (Swift.String) -> T)
  public func specify<T>(property: inout T, name: Swift.String?, converter: ((Swift.String) -> T)?)
  public func exclude<T>(property: inout T)
  @objc deinit
}
infix operator <-- : LogicalConjunctionPrecedence
public func <-- <T>(property: inout T, name: Swift.String) -> QuickVO.CustomMappingKeyValueTuple
public func <-- <T>(property: inout T, names: [Swift.String]) -> QuickVO.CustomMappingKeyValueTuple
public func <-- <Transform>(property: inout Transform.Object, transformer: Transform) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: (Swift.String?, Transform?)) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: ([Swift.String], Transform?)) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: Transform) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: (Swift.String?, Transform?)) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: ([Swift.String], Transform?)) -> QuickVO.CustomMappingKeyValueTuple where Transform : QuickVO.TransformType
infix operator <<< : AssignmentPrecedence
public func <<< (mapper: QuickVO.HelpingMapper, mapping: QuickVO.CustomMappingKeyValueTuple)
public func <<< (mapper: QuickVO.HelpingMapper, mappings: [QuickVO.CustomMappingKeyValueTuple])
infix operator >>> : AssignmentPrecedence
public func >>> <T>(mapper: QuickVO.HelpingMapper, property: inout T)
open class DataTransform : QuickVO.TransformType {
  public typealias Object = Foundation.Data
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Data?
  open func transformToJSON(_ value: Foundation.Data?) -> Swift.String?
  @objc deinit
}
open class CustomDateFormatTransform : QuickVO.DateFormatterTransform {
  public init(formatString: Swift.String)
  @objc deinit
}
open class DateFormatterTransform : QuickVO.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.String
  final public let dateFormatter: Foundation.DateFormatter
  public init(dateFormatter: Foundation.DateFormatter)
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.String?
  @objc deinit
}
public protocol TransformType {
  associatedtype Object
  associatedtype JSON
  func transformFromJSON(_ value: Any?) -> Self.Object?
  func transformToJSON(_ value: Self.Object?) -> Self.JSON?
}
public protocol HandyJSONCustomTransformable : QuickVO._ExtendCustomBasicType {
}
public protocol HandyJSON : QuickVO._ExtendCustomModelType {
}
public protocol HandyJSONEnum : QuickVO._RawEnumProtocol {
}
@_silgen_name("swift_getTypeByMangledNameInContext")
public func _getTypeByMangledNameInContext(_ name: Swift.UnsafePointer<Swift.UInt8>, _ nameLength: Swift.Int, genericContext: Swift.UnsafeRawPointer?, genericArguments: Swift.UnsafeRawPointer?) -> (any Any.Type)?
@_silgen_name("swift_getTypeContextDescriptor")
public func _swift_getTypeContextDescriptor(_ metadata: Swift.UnsafeRawPointer?) -> Swift.UnsafeRawPointer?
public protocol _Measurable {
}
extension Swift.Bool {
  public var int: Swift.Int {
    get
  }
  public var string: Swift.String {
    get
  }
}
public enum RTCVideoMirror {
  case none
  case mirror
  case auto
  public static func == (a: QuickVO.RTCVideoMirror, b: QuickVO.RTCVideoMirror) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RoomVideoDelegate {
  func videoView(didChangeVideoSize size: CoreFoundation.CGSize)
  func renderFisrtFrame()
}
extension QuickVO.RoomVideoDelegate {
  public func videoView(didChangeVideoSize size: CoreFoundation.CGSize)
  public func renderFisrtFrame()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class RoomVideoView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var delegate: (any QuickVO.RoomVideoDelegate)?
  @_Concurrency.MainActor @preconcurrency public var mirror: QuickVO.RTCVideoMirror {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var isEnabled: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var videoContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var rotationOverride: Foundation.NSValue? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
extension QuickVO.RoomVideoView : WebRTC.RTCVideoViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func videoView(_ videoView: any WebRTC.RTCVideoRenderer, didChangeVideoSize size: CoreFoundation.CGSize)
}
public enum RTCStatisLevel : Swift.Int {
  case none
  case veryBad
  case bad
  case generally
  case good
  case veryGood
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct NetMonitorValue {
  public var up: QuickVO.RTCStatisLevel
  public var donw: QuickVO.RTCStatisLevel
}
public struct RoomLocalOption {
  public var userFontCamera: Swift.Bool
  public var defaultStartCamera: Swift.Bool
  public var defaultUseMicrophone: Swift.Bool
  public init(userId: Swift.String, userFontCamera: Swift.Bool = true, defaultStartCamera: Swift.Bool = true, defaultUseMicrophone: Swift.Bool = true)
}
public class RoomVideoCaptureConfig {
  public var width: Swift.Int
  public var height: Swift.Int
  public var fps: Swift.Int
  public var filter: QuickVO.RoomVideoFilterConfig {
    get
  }
  public init(width: Swift.Int, height: Swift.Int, fps: Swift.Int, filter: QuickVO.RoomVideoFilterConfig? = nil)
  @objc deinit
}
public class RoomAudioCaptureConfig {
  public var echoCancellation: Swift.Bool
  public var noiseSuppression: Swift.Bool
  public var autoGainControl: Swift.Bool
  public var audioLevelMonitor: Swift.Int?
  public init(echoCancellation: Swift.Bool, noiseSuppression: Swift.Bool, autoGainControl: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoFilterConfig {
  public var enable: Swift.Bool {
    get
    set
  }
  public var buffing: Swift.Float {
    get
    set
  }
  public var white: Swift.Float {
    get
    set
  }
  public var thin: Swift.Float {
    get
    set
  }
  public var eye: Swift.Float {
    get
    set
  }
  public var lipstick: Swift.Float {
    get
    set
  }
  public var blusher: Swift.Float {
    get
    set
  }
  public var light: Swift.Float {
    get
    set
  }
  @objc deinit
}
public struct RTCConfig {
  public let socketURL: Foundation.URL
  public let iceURL: [Swift.String]
  public init(socketURL: Foundation.URL, iceURL: [Swift.String])
}
public enum RTCParticipantAtion {
  case audioEnable
  case videoEnable
  public static func == (a: QuickVO.RTCParticipantAtion, b: QuickVO.RTCParticipantAtion) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RTCParticipantDelegate {
  func addVideoTrack(_ track: QuickVO.RoomVideoTrack)
  func addAuidoTrack(_ track: QuickVO.RoomAudioTrack)
  func action(_ action: QuickVO.RTCParticipantAtion)
  func speacking(_ speacking: Swift.Bool)
  func network(_ net: QuickVO.NetMonitorValue)
  func debugInfo(_ net: QuickVO.NetMonitorValue)
}
extension QuickVO.RTCParticipantDelegate {
  public func addAuidoTrack(_ track: QuickVO.RoomAudioTrack)
  public func action(_ action: QuickVO.RTCParticipantAtion)
  public func speacking(_ speacking: Swift.Bool)
  public func network(_ net: QuickVO.NetMonitorValue)
  public func debugInfo(_ net: QuickVO.NetMonitorValue)
}
public class RTCParticipant {
  public var id: Swift.String
  public init(id: Swift.String)
  public var delegate: (any QuickVO.RTCParticipantDelegate)?
  public var audioEnable: Swift.Bool {
    get
  }
  public var videoEnable: Swift.Bool {
    get
  }
  public var isSpeacking: Swift.Bool {
    get
  }
  public var netMonitor: QuickVO.NetMonitorValue {
    get
  }
  public var volume: Swift.Double? {
    get
    set
  }
  public var audioTracks: [QuickVO.RoomAudioTrack] {
    get
  }
  public var videoTracks: [QuickVO.RoomVideoTrack] {
    get
  }
  @objc deinit
}
public protocol RoomError : Foundation.LocalizedError, Swift.CustomStringConvertible {
}
extension QuickVO.RoomError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConnectError : QuickVO.RoomError {
  case requestError(Swift.Int, _: Swift.String? = nil)
  case requestTimeOut
  case tokenInvalid
  case overTheLimit
  case rtcConnectError
  public var description: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class RoomAudioTrack {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var volume: Swift.Double {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RoomVideoTrack {
  public var trackId: Swift.String {
    get
  }
  public var isEnabled: Swift.Bool {
    get
    set
  }
  public var render: QuickVO.RoomVideoView? {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class RTCNetworkMonitor {
  public enum NetworkMotorStatus {
    case reachable
    case unReachable
    public static func == (a: QuickVO.RTCNetworkMonitor.NetworkMotorStatus, b: QuickVO.RTCNetworkMonitor.NetworkMotorStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum NetworkMotorType {
    case wifi
    case cellular
    case other
    public static func == (a: QuickVO.RTCNetworkMonitor.NetworkMotorType, b: QuickVO.RTCNetworkMonitor.NetworkMotorType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var status: ((QuickVO.RTCNetworkMonitor.NetworkMotorStatus) -> Swift.Void)?
  final public var type: ((QuickVO.RTCNetworkMonitor.NetworkMotorType) -> Swift.Void)?
  final public func stopMonitor()
  final public func startMonitor()
  @objc deinit
}
extension QuickVO.RTCRoomConnect : Swift.Equatable {}
extension QuickVO.RTCRoomConnect : Swift.Hashable {}
extension QuickVO.RTCCameraPosion : Swift.Equatable {}
extension QuickVO.RTCCameraPosion : Swift.Hashable {}
extension Swift.Int : QuickVO._Transformable {}
extension QuickVO.DebugMode : Swift.Equatable {}
extension QuickVO.DebugMode : Swift.Hashable {}
extension QuickVO.DebugMode : Swift.RawRepresentable {}
extension Foundation.NSString : QuickVO._Transformable {}
extension Foundation.NSNumber : QuickVO._Transformable {}
extension Foundation.NSArray : QuickVO._Transformable {}
extension Foundation.NSDictionary : QuickVO._Transformable {}
extension Swift.UInt : QuickVO._Transformable {}
extension Swift.Int8 : QuickVO._Transformable {}
extension Swift.Int16 : QuickVO._Transformable {}
extension Swift.Int32 : QuickVO._Transformable {}
extension Swift.Int64 : QuickVO._Transformable {}
extension Swift.UInt8 : QuickVO._Transformable {}
extension Swift.UInt16 : QuickVO._Transformable {}
extension Swift.UInt32 : QuickVO._Transformable {}
extension Swift.UInt64 : QuickVO._Transformable {}
extension Swift.Bool : QuickVO._Transformable {}
extension Swift.Float : QuickVO._Transformable {}
extension Swift.Double : QuickVO._Transformable {}
extension Swift.String : QuickVO._Transformable {}
extension Swift.Array : QuickVO._Transformable {}
extension Swift.Set : QuickVO._Transformable {}
extension Swift.Dictionary : QuickVO._Transformable {}
extension QuickVO.RTCVideoMirror : Swift.Equatable {}
extension QuickVO.RTCVideoMirror : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.Equatable {}
extension QuickVO.RTCStatisLevel : Swift.Hashable {}
extension QuickVO.RTCStatisLevel : Swift.RawRepresentable {}
extension QuickVO.RTCParticipantAtion : Swift.Equatable {}
extension QuickVO.RTCParticipantAtion : Swift.Hashable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorStatus : Swift.Equatable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorStatus : Swift.Hashable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorType : Swift.Equatable {}
extension QuickVO.RTCNetworkMonitor.NetworkMotorType : Swift.Hashable {}
